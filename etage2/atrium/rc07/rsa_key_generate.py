from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse

# Partie 1 : Créer la clé secrète d'andrea 
# Définir les composantes de la clé RSA
n = 23243245277316038494147647986553436916685318567122156242839048031199671178110000348585092414728452202438651412440860950557990458039566899952459808899237696204113751480904729337172859070111483128717654686647453026113474672939152234434337160935176157495952934704093763529365868537773881495862744292020409858470072591986171190057675807597882594843134962044944409223890570160443233220770396791469416581662041271590983351353048920327919146187387687390897442794755737159729803862366666747983730333681951272771990555191897178728233619018993687661060798915304789992779700426471449352710276097769745196779870927446961997245123
e = 76248246496911308199911741710403384538948685990533774058696260995577131298689
d = 0xa71fad2e2755eac0304f9474ba090412d8a6f0f744daaa5b9cba65847144a91eae50938aea7552e3c3e08ce5f440fe9f6118471ece1368e4d9d90db547e5e06d496fe11202c4d5c5a4bc204a7fe9d93e395a01561c13e183008ebddcc6958da981d830328f4f5c160bdb490253caa825b2b95110266a3f56bd63c50c186af67a5a8a3662fa46eb778df225e183775ddd5f986907de5f27fd6e3c419bb9ac05c9649f230267b912096f47a2f114e5af82a510b43f0fbbf0804818df728a919c9876e1ed23768764c534148162e993da0fd749e7c9cff87958031135099632ce64776afdc955e85a36d43cdd1779079e31b9a2664e4cb9b1e4caa4a2d600418d21

# Créer les composantes de la clé RSA
rsa_components = (n, e, d)

# Construire la clé RSA
rsa_key = RSA.construct(rsa_components)

# On récupère p et q 
p = rsa_key.p
q = rsa_key.q 
print("p=,", rsa_key.p)
print("q=",rsa_key.q)

# On affiche la clé RSA
print("Clé privée RSA d'Andrea")
print(rsa_key.export_key())
public = rsa_key.publickey().export_key()
print(public.decode())

# Partie 2 : Créer la clé secrète de Scott

# Partie 2 : Clé secrète de Scott
n1 = n
e1 = 449527259342707216309011583433252716090334009242175072012781895410249601
d1 = inverse(e1, (p-1)*(q-1))

# Afficher la clé RSA pour Scott
rsa_key_2 = RSA.construct((n, e1, d1))
print("Clé privée RSA de Scott")
print(rsa_key_2.export_key())
public_scott = rsa_key_2.publickey().export_key()
print(public_scott.decode())



