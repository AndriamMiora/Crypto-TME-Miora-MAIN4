# SageMath Script

# Define the prime p
p = 2**64 - 59

# Create the polynomial ring over the finite field Zmod(p)
R = PolynomialRing(Zmod(p), 'x')
x = R.gen()

# Given data
X= [14667739512154658050, 8221517843067443595, 999865161532217528, 18122179727716873240, 15028556428835724486, 6687226147677270499, 8413857187499361337, 12441505194529861629, 4117973879168451410, 9242369578250237682, 12481842679447193116, 6097195810309843775, 1966547920964255779, 9445948004228198216, 12561025879568681174, 6114984516856999424, 4786635413480985489, 667890511373726295, 13555602879881964262, 9655986460331108472]
A= [9474001934696200061, 3777241960100869082, 4856645977007755278, 9590907115723521274, 13286844612025915782, 2396360741638385306, 6800771601224903785, 10817722018172905568, 4957547174693805942, 3604569223792928360, 6158247286755886020, 1411537210395198812, 9736343002455154168, 11432973035766353130, 11221039245073366608, 16697563735676008878, 3976556759776868793, 2885707315463852715, 6978276388534200407, 7059002457219277801]
B= [13472559084836786985, 9674435555514279693, 2586405799939904983, 11861067324940274038, 14464955405413264871, 3457140176057585699, 17537362930185593024, 1618158042814551443, 11909031139738266807, 5582443432540990518, 3903124986787662239, 17088846497229160295, 17553078909063635598, 3200827285854283389, 13030269665340673503, 11688830676482971801, 340967140327840273, 9430459742718828784, 6759791064662649236, 9520291801633554101]
C= [10960133266660580077, 15332318914678216847, 3041936925222389565, 13735438434105145891, 941752877874944805, 14072662021727078149, 15118755510447864239, 2888520787645758192, 150919003003345570, 15431265260914990599, 11802697803897091707, 2335201551652108948, 14989218031207554381, 6586645146885156029, 6338922956465944951, 18054683138721240220, 3182809135217595283, 2526419458281775278, 6153439538594722379, 9153930829028859726]

# Collect points for interpolation
points_R = [(X[i], A[i]) for i in range(9)]
#points_S = [(X[i], B[i]) for i in range(13)]
#points_T = [(X[i], C[i]) for i in range(13)]

# Compute Lagrange polynomials
poly_R = R.lagrange_polynomial(points_R)
#poly_S = R.lagrange_polynomial(points_S)
#poly_T = R.lagrange_polynomial(points_T)

# Extract keys
key_R = hex(poly_R(0))
#key_S = hex(poly_S(0))
#key_T = hex(poly_T(0))

# Print keys without '0x' prefix
print(f"Clé R(0): {key_R[2:]}")
#print(f"Clé S(0): {key_S[2:]}")
#print(f"Clé T(0): {key_T[2:]}")
